import torch
from torch.autograd import Variable

import data

def check_cuda():
    """
    Checks if cuda device is available returns device
    """
    device_type = "cpu"
    if torch.cuda.is_available():
        print("NOTICE: You have a CUDA device. Running with CUDA")
        device_type = "cuda"

    device = torch.device(device_type)

    return device, device_type


def generate_lstm(data_path='data.pkl' ,
                  save_path='lstm.pt',
                  sentence_len=25,
                  temperature=1.0,
                  seed=1234):
    """
    Generates sentence based on trained lstm model

    Args:
        data_path: String, path to data file (default data.pkl)
        save_path: String, path to trained saved file (default lstm.pt)
        sentence_len: Int, the size of the sentence (default 25)
        temperature:  Float, the higher temperature increases diversity
            the temperature to be used (default 1.0)
        seed: Int, random seed (default 1234)

    Return:
        String, sentence generated by trained lstm
    """
    assert temperature > 1e-3, "Temperature needs to be greater than 1e-3"

    device, device_type = check_cuda()

    # load model
    if device_type == 'cpu':
        with open(save_path, 'rb') as f:
            model = torch.load(f, map_location="cpu").to(device)
    else:
        with open(save_path, 'rb') as f:
            model = torch.load(f).to(device)
    model.eval()

    corpus = data.Corpus(data_path)
    num_tokens = len(corpus.dictionary)
    hidden = model.init_hidden(1)
    input = torch.randint(num_tokens, (1, 1), dtype=torch.long).to(device)

    sentence = []
    with torch.no_grad():  # don't track history
        for i in range(sentence_len):
            output, hidden = model(input, hidden)
            word_weights = output.squeeze().div(temperature).exp().cpu()
            word_idx = torch.multinomial(word_weights, 1)[0]
            input.fill_(word_idx)
            word = corpus.dictionary.idx2word[word_idx]

            # change eos to newline
            if word == "<eos>":
                sentence.append('\n')
            else:
                sentence.append(word)

    return " ".join(sentence)


if __name__ == "__main__":
    for x in range(10):
        print("{}:   {}".format(x, generate_lstm()))
        print()
